void *routine(void *arg)
{
    t_philo *philo = (t_philo *)arg;

    while (1)
    {
        // Think (simulate thinking activity)
        print_message("is thinking", philo);

        // Try to pick up forks
        if (ft_take_fork(philo) != 0)
            continue; // Handle the error condition

        // Eat
        ft_eat_meal(philo);

        // Update the last meal time
        philo->last_meal_time = ft_get_time() - philo->data->start_time;

        // Release forks
        drop_fork(philo);

        // Sleep (simulate sleeping activity)
        print_message("is sleeping", philo);
        ft_usleep(philo->data->time_to_sleep);

        // Check if the philosopher has died
        if (ft_get_time() - philo->last_meal_time > philo->data->time_to_die)
        {
            // Print a message indicating the philosopher has died
            print_message("has died", philo);

            // You can also choose to exit the thread or the entire program here
            // depending on your simulation requirements.
            // For example:
            // exit(EXIT_FAILURE); // Exit the entire program

            // Or set some flag to indicate that this philosopher has died,
            // and have a separate function check for the simulation end condition.
            // For example:
            // philo->data->philosopher_has_died = 1;
        }
    }

    return NULL;
}
