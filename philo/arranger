#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

#define PHILO_STATE_EATING 1
#define PHILO_STATE_SLEEPING 2
#define PHILO_STATE_THINKING 3
#define PHILO_STATE_DEAD 4

typedef struct s_philo {
    pthread_mutex_t *left_fork;
    pthread_mutex_t *right_fork;
    int id;
    int state;
    int eating;
    // Add other necessary fields
} t_philo;

// Function to print messages with timestamps
void print_message(t_philo *philo, int state) {
    // Calculate the timestamp in milliseconds
    // You need to implement ft_get_time() accordingly
    long timestamp = ft_get_time();
    
    printf("%ld %d ", timestamp, philo->id);
    
    if (state == PHILO_STATE_EATING) {
        printf("is eating\n");
    } else if (state == PHILO_STATE_SLEEPING) {
        printf("is sleeping\n");
    } else if (state == PHILO_STATE_THINKING) {
        printf("is thinking\n");
    } else if (state == PHILO_STATE_DEAD) {
        printf("has died\n");
    }
    fflush(stdout);
}

// Function for the philosopher to think
void ft_think(t_philo *philo) {
    philo->state = PHILO_STATE_THINKING;
    print_message(philo, philo->state);
}

// Function for the philosopher to sleep
void ft_sleep(t_philo *philo) {
    philo->state = PHILO_STATE_SLEEPING;
    print_message(philo, philo->state);
    usleep(philo->data->time_to_sleep * 1000);
}

// Function for the philosopher to take forks and eat
void ft_eat_meal(t_philo *philo) {
    pthread_mutex_lock(philo->left_fork);
    pthread_mutex_lock(philo->right_fork);

    philo->state = PHILO_STATE_EATING;
    philo->eating++;
    philo->last_meal_time = ft_get_time();
    print_message(philo, philo->state);

    usleep(philo->data->time_to_eat * 1000);

    pthread_mutex_unlock(philo->right_fork);
    pthread_mutex_unlock(philo->left_fork);
}


// void	print_message(t_philo *philo, int state)
// {
// 	long	timestamp;

// 	timestamp = ft_get_time() - philo->data->start_time;
// 	printf("%ld %d ", timestamp, philo->id)
// 	if (state ==  PHILO_STATE_EATING)
// 	{
// 		printf("%ld\t%d has taken a fork\n", timestamp, id);
// 		printf("%ld\t%d has taken a fork\n", timestamp, id);
// 		printf("%ld\t%d is eating\n", timestamp, id);
// 	}
// 	else if (state == PHILO_STATE_SLEEPING)
// 		printf("%ld\t%d is sleeping\n", timestamp, id);
// 	else if (state == PHILO_STATE_THINKING)
// 		printf("%ld\t%d is thinking\n", timestamp, id);
// 	else if (state == PHILO_STATE_DEAD)
// 		printf("%ld\t%d is dead\n", timestamp, id);
// }
